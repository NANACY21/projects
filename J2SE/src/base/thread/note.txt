[线程概述]
一个程序有多个进程，一个进程内有多个线程
进程是一个独立运行的程序，线程是代码片段

线程有6种状态，见Thread源码内部类State

线程若是start启动，代码书写的顺序和代码执行的顺序有可能不一样
main也是一个线程，和main里的线程一样
main里有线程A start，main线程和A线程执行顺序不确定
线程若是调用run，代码就是线性执行
main{t.start;t.stop;}
这个stop方法是main调用的，
stop()是手写的，目的：使run()结束


线程的run()由cpu来调度
线程设置优先级来控制cpu调度
优先级大的线程，cpu优先调用该线程，但不保证会按优先级来执行


锁对象设为共有内部数据被改动不影响同步


线程的调度是分时间片式的，而不是抢先式的，这句话错误。



[线程和进程各自有什么区别和优劣？]
进程是资源分配的最小单位，线程是程序执行的最小单位。
进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，
建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。
而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，
同时创建一个线程的开销也比进程要小很多。[ok]
线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，
而进程之间的通信需要以通信的方式（IPC)进行。
不过如何处理好同步与互斥是编写多线程程序的难点。[ok]
但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，
而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。[ok]


[线程和进程根本区别]
根本区别：
进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位
在开销方面：
每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；
线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），
线程之间切换的开销小。
所处环境：
在操作系统中能同时运行多个进程（程序）；
而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）
内存分配方面：
系统在运行的时候会为每个进程分配不同的内存空间；
而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。
包含关系：
没有线程的进程可以看做是单线程的，
如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；
线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。
[另外，]线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程包含以下内容：
一个指向当前被执行指令的指令指针；
一个栈；
一个寄存器值的集合，定义了一部分描述正在执行线程的处理器状态的值
一个私有的数据区。